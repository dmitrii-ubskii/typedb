
        private SharedState sharedState() {
            if (sharedState == null) {
                synchronized (this) {
                    if (sharedState == null) {
                        Map<ResolvableConjunction, Rule> applicableRules = new HashMap<>();
                        Map<Rule, Set<Unifier>> ruleUnifiers = NodeRegistry.this.logicManager().applicableRules(key);
                        Map<ResolvableConjunction, ConjunctionSubRegistry> subRegistries = new HashMap<>();
                        ruleUnifiers.keySet().forEach(rule -> {
                            rule.condition().disjunction().conjunctions().forEach(conjunction -> {
                                applicableRules.put(conjunction, rule);
                                subRegistries.put(conjunction, NodeRegistry.this.conjunctionSubRegistry(conjunction));
                            });
                        });
                        sharedState = new SharedState(applicableRules, ruleUnifiers, subRegistries);
                    }
                }
            }
            return sharedState;
        }

        public class SharedState {
            private final Map<ResolvableConjunction, Rule> applicableRules;
            private final Map<Rule, Set<Unifier>> ruleUnifiers;
            private final Map<ResolvableConjunction, ConjunctionSubRegistry> subRegistries;

            public SharedState(Map<ResolvableConjunction, Rule> applicableRules, Map<Rule, Set<Unifier>> ruleUnifiers, Map<ResolvableConjunction, ConjunctionSubRegistry> subRegistries) {
                this.applicableRules = applicableRules;
                this.ruleUnifiers = ruleUnifiers;
                this.subRegistries = subRegistries;
            }

            public Map<ResolvableConjunction, Rule> applicableRules() {
                return applicableRules;
            }

            public Map<Rule, Set<Unifier>> ruleUnifiers() {
                return ruleUnifiers;
            }

            public Map<ResolvableConjunction, ConjunctionSubRegistry> subRegistries() {
                return subRegistries;
            }
        }
